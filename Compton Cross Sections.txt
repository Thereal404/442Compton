{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chi = 4570.104121096848\n",
      "L = 4.65300135797947e+32\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import csv\n",
    "import scipy.optimize as opt\n",
    "from scipy.optimize import minimize, least_squares\n",
    "from scipy.constants import e, h, hbar, alpha, c, m_e\n",
    "DPI = 100\n",
    "\n",
    "# A bunch of constants factored into a single variable. This is half the classical electron radius\n",
    "f = (hbar * alpha / m_e / c)**2 / 2\n",
    "# A grid of scattering angles in rad.\n",
    "theta = np.arange(0, 2*np.pi, 0.01)\n",
    "n = len(theta)\n",
    "# Our grid of photon energies (in MeV).\n",
    "Egrid = 0.0176\n",
    "# scaling factor\n",
    "L = 3.3e32\n",
    "\n",
    "CoWeight = 0\n",
    "InCoWeight = 1\n",
    "\n",
    "\n",
    "# plot experimental data\n",
    "x = [] # thetas\n",
    "y = [] # counts\n",
    "z = [] # errors\n",
    "\n",
    "with open('Carbon.csv') as File:  \n",
    "    Line_reader = csv.reader(File, delimiter=',')\n",
    "    for row in Line_reader:\n",
    "        x.append(float(row[0]))\n",
    "        y.append(float(row[1]))\n",
    "        z.append(float(row[2]))\n",
    "        \n",
    "# define functions for the KN and R cross-sections as a function of scattering angle phi\n",
    "def KleinNishina(phi):\n",
    "    nu = Egrid * 1.e6 * e / h\n",
    "    lam = c / nu\n",
    "    lamp = lam + h / m_e / c * (1 - np.cos(phi))\n",
    "    P = lam / lamp\n",
    "    dsigma_dOmegaKN = f * P**2 * (P + 1/P - np.sin(phi)**2)\n",
    "    return dsigma_dOmegaKN\n",
    "\n",
    "def Rayleigh(phi):\n",
    "    dsigma_dOmegaR = f * (1 + np.cos(phi)**2)\n",
    "    return dsigma_dOmegaR\n",
    "    \n",
    "#write function to compute chi-squared as a function of a scaling factor l\n",
    "def chi(l):\n",
    "    chiSquare = 0\n",
    "    for i,b in enumerate(x):\n",
    "        chiSquare = chiSquare + (l * (InCoWeight*KleinNishina(b) + CoWeight*Rayleigh(b)) - y[i])**2 / z[i]**2\n",
    "    #print(chiSquare)\n",
    "    return chiSquare\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "result = opt.minimize_scalar(chi, bounds=(3e30,4e34),method='bounded')\n",
    "print(\"Chi = \" + str(result.fun))\n",
    "print(\"L = \" + str(result.x))\n",
    "\n",
    "def plot_diff_xsec(E):\n",
    "    \"\"\"Plot the differential cross section for incoming photon energy, E.\"\"\"\n",
    "\n",
    "    # Incoming photon frequency (s^-1) and wavelength (m).\n",
    "    nu = E * 1.e6 * e / h\n",
    "    lam = c / nu\n",
    "    # energy in keV\n",
    "    Ek = E*10**3\n",
    "\n",
    "    # Scattered photon wavelength (m).\n",
    "    lamp = lam + h / m_e / c * (1 - np.cos(theta))\n",
    "    P = lam / lamp\n",
    "    # Differential cross section given by the Klein-Nishina formula.\n",
    "    dsigma_dOmegaKN = f * P**2 * (P + 1/P - np.sin(theta)**2)\n",
    "    dsigma_dOmegaT = f * (1 + np.cos(theta)**2)\n",
    "\n",
    "    # Plot Thompson.\n",
    "    ax2.plot(np.degrees(theta[:n // 2]), result.x * dsigma_dOmegaT[:n // 2],\n",
    "             label= 'Thompson at: ' + str(Ek) + r' keV')\n",
    "    # Plot Klein-Nishina\n",
    "    ax2.plot(np.degrees(theta[:n//2]), result.x * dsigma_dOmegaKN[:n//2],\n",
    "             label='Klein-Nishina at: ' + str(Ek) + r' keV')\n",
    "    # Plot the total csection\n",
    "    ax2.plot(np.degrees(theta[:n//2]), result.x * (InCoWeight*dsigma_dOmegaKN[:n//2] + CoWeight*dsigma_dOmegaT[:n // 2]), \n",
    "             label='Total at: ' + str(Ek) + r' keV')\n",
    "\n",
    "# A Matplotlib figure with a polar Axes above a Cartesian one.\n",
    "fig, ax2 = plt.subplots()\n",
    "\n",
    "plot_diff_xsec(Egrid)\n",
    "ax2.set_xlabel(r'$\\theta\\;/\\mathrm{deg}$')\n",
    "ax2.set_ylabel(r'$N (counts)$')\n",
    "# Set the Cartesian x-axis ticks to sensible values (in degrees).\n",
    "ax2.set_xticks([0, 45, 90, 135, 180])\n",
    "\n",
    "# plot experimental data\n",
    "\n",
    "        \n",
    "plt.plot(x,y,color='r',label=\"Carbon data\")\n",
    "\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
